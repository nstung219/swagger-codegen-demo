#openapi: "3.0.0"
#info:
#  description: User Demo
#  version: 1.0.0
#  title: User Demo
#  license:
#    name: Apache 2.0
#    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
#host: localhost
#basePath: /v1
#tags:
#  - name: user
#    description: User apis
#schemes:
#  - http
#paths:
#  '/user/{userId}':
#    get:
#      tags:
#        - user
#      summary: Find user by ID
#      description: Returns a single User
#      operationId: getUserDetailsById
#      produces:
#        - application/json
#      parameters:
#        - name: userId
#          in: path
#          description: ID of User to return
#          required: true
#          type: integer
#          format: int64
#      responses:
#        '200':
#          description: successful operation
#          schema:
#            $ref: '#/definitions/User'
#        '400':
#          description: Invalid User ID supplied
#        '404':
#          description: User not found
#  '/user':
#    post:
#      tags:
#        - user
#      summary: Save user
#      description: Save user and returns a single User
#      operationId: saveUser
#      produces:
#        - application/json
#      parameters:
#        - name: user
#          description: User
#          schema:
#            $ref: '#/definitions/User'
#          in: 'body'
#      responses:
#        '200':
#          description: successful operation
#          schema:
#            $ref: '#/definitions/User'
#        '400':
#          description: Invalid User supplied
#        '409':
#          description: User id not unique
#definitions:
#  User:
#    type: object
#    properties:
#      id:
#        type: integer
#        format: int64
#      firstName:
#        type: string
#        description: User First Name
#      lastName:
#        type: string
#        description: User Last Name
#    xml:
#      name: user
openapi: "3.0.0"
info:
  description: User Demo
  version: 1.0.0
  title: User Demo
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: "http://localhost:8080/"
tags:
  - name: user
    description: User apis
paths:
  '/user/{userId}':
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single User
      operationId: getUserDetailsById
      parameters:
        - name: userId
          in: path
          description: ID of User to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: Invalid User ID supplied
        '404':
          description: User not found
  '/user':
    post:
      tags:
        - user
      summary: Save user
      description: Save user and returns a single User
      operationId: saveUser
      parameters:
        - name: user
          description: User
          schema:
            $ref: '#/components/schemas/User'
          in: 'query'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid User supplied
        '409':
          description: User id not unique
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
          description: User First Name
        lastName:
          type: string
          description: User Last Name
      xml:
        name: user
