/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package api;

import model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-10-11T17:38:32.686601800+07:00[Asia/Bangkok]")
@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default UserApiDelegate getDelegate() {
        return new UserApiDelegate() {};
    }

    /**
     * GET /user/{userId} : Find user by ID
     * Returns a single User
     *
     * @param userId ID of User to return (required)
     * @return successful operation (status code 200)
     *         or Invalid User ID supplied (status code 400)
     *         or User not found (status code 404)
     */
    @ApiOperation(value = "Find user by ID", nickname = "getUserDetailsById", notes = "Returns a single User", response = User.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 400, message = "Invalid User ID supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @GetMapping(
        value = "/user/{userId}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> getUserDetailsById(@ApiParam(value = "ID of User to return",required=true) @PathVariable("userId") Long userId) {
        return getDelegate().getUserDetailsById(userId);
    }


    /**
     * POST /user : Save user
     * Save user and returns a single User
     *
     * @param user User (optional)
     * @return successful operation (status code 200)
     *         or Invalid User supplied (status code 400)
     *         or User id not unique (status code 409)
     */
    @ApiOperation(value = "Save user", nickname = "saveUser", notes = "Save user and returns a single User", response = User.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 400, message = "Invalid User supplied"),
        @ApiResponse(code = 409, message = "User id not unique") })
    @PostMapping(
        value = "/user",
        produces = { "application/json" }
    )
    default ResponseEntity<User> saveUser(@ApiParam(value = "User") @Valid User user) {
        return getDelegate().saveUser(user);
    }

}
